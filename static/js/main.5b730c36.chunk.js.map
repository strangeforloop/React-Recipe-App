{"version":3,"sources":["recipe.module.css","logo.svg","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","image","calories","ingredients","url","className","style","recipe","content","imageContent","src","alt","ingredientsList","map","ingredient","text","href","recipeSource","target","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","results","setResults","useEffect","console","log","getRecipes","a","async","fetch","response","json","data","hits","length","onSubmit","e","preventDefault","type","value","onChange","placeholder","q","alert","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,MAAQ,sBAAsB,aAAe,6BAA6B,MAAQ,sBAAsB,gBAAkB,gCAAgC,aAAe,+B,4ECD7PD,EAAOC,QAAU,IAA0B,kC,iJCsB5BC,EAnBA,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAiBC,GAA8B,EAAxCC,SAAwC,EAA9BD,OAAOE,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,IACrD,OACE,yBAAKC,UAAWC,IAAMC,QACpB,yBAAKF,UAAWC,IAAME,SACpB,uBAAGH,UAAWC,IAAMN,OAAQA,GAC5B,yBAAKK,UAAWC,IAAMG,cACpB,yBAAKJ,UAAWC,IAAML,MAAOS,IAAKT,EAAOU,IAAI,MAE/C,wBAAIN,UAAWC,IAAMM,iBAClBT,EAAYU,KAAI,SAACC,GAAD,OACf,4BAAKA,EAAWC,UAGpB,uBAAGC,KAAMZ,EAAKC,UAAWC,IAAMW,aAAcC,OAAO,SAApD,6BC2EOC,G,MAtFH,WACV,IADgB,EAOcC,mBAAS,IAPvB,mBAOTC,EAPS,KAOAC,EAPA,OAQYF,mBAAS,IARrB,mBAQTG,EARS,KAQDC,EARC,OASUJ,mBAAS,WATnB,mBASTK,EATS,KASFC,EATE,OAUcN,mBAAS,IAVvB,mBAUTO,EAVS,KAUAC,EAVA,KAYhBC,qBAAU,WACRC,QAAQC,IAAI,uBACZC,MACC,CAACP,IAEJ,IAAMO,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OAAoCV,EAApC,mBAjBf,WAiBe,oBAhBd,sCAeG,cACXW,EADW,kBAAAH,EAAA,MAEEG,EAASC,QAFX,OAEXC,EAFW,OAGjBR,QAAQC,IAAI,sBACZD,QAAQC,IAAI,SAAUO,GACtBR,QAAQC,IAAI,OAAQO,EAAKC,MACzBjB,EAAWgB,EAAKC,MAChBX,EAAWU,GACc,IAArBA,EAAKC,KAAKC,QACZV,QAAQC,IAAI,eATG,uCAwBnB,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,WACb,wBAAIA,UAAU,aAAd,iBACA,0BAAMoC,SAXI,SAAAC,GAChBA,EAAEC,iBACFjB,EAASH,GACTC,EAAU,KAQuBnB,UAAU,eACnC,2BAAOA,UAAU,aAAauC,KAAK,QAAQC,MAAOtB,EAAQuB,SAjB/C,SAAAJ,GACnBlB,EAAUkB,EAAExB,OAAO2B,QAgBuEE,YAAY,0BAC9F,4BAAQ1C,UAAU,gBAAgBuC,KAAK,UAAvC,aAIW,KAAdjB,EAAQqB,EAAYC,MAAM,yCAe7B,8BACE,uBAAG5C,UAAU,mBAAb,uBAAoDoB,EAApD,MACA,yBAAKpB,UAAU,WACZgB,EAAQR,KAAI,SAACN,GAAD,OACX,kBAAC,EAAD,CACE2C,IAAK3C,EAAOA,OAAOH,IACnBJ,MAAOO,EAAOA,OAAO4C,MACrBjD,SAAUK,EAAOA,OAAOL,SACxBD,MAAOM,EAAOA,OAAON,MACrBE,YAAaI,EAAOA,OAAOJ,YAC3BC,IAAKG,EAAOA,OAAOH,cCtEbgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b730c36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2Ib66\",\"content\":\"recipe_content__3RJEr\",\"title\":\"recipe_title__1x67L\",\"imageContent\":\"recipe_imageContent__1PBwJ\",\"image\":\"recipe_image__11OhW\",\"ingredientsList\":\"recipe_ingredientsList__2cMFn\",\"recipeSource\":\"recipe_recipeSource__C_K8e\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport style from \"./recipe.module.css\"\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, url }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <div className={style.content}>\r\n        <p className={style.title}>{title}</p>\r\n        <div className={style.imageContent}>\r\n          <img className={style.image} src={image} alt=\"\" />\r\n        </div>\r\n        <ol className={style.ingredientsList}>\r\n          {ingredients.map((ingredient) => (\r\n            <li>{ingredient.text}</li>\r\n          ))}\r\n        </ol>\r\n        <a href={url} className={style.recipeSource} target='blank'>Get Cooking Directions</a>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = '80756ccf';\n  const APP_KEY = '72691f82f023817109d7620cc7d12c86';\n\n  // const exampleRequest = `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n  // const [counter, setCounter] = useState(0);\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n  const [results, setResults] = useState({});\n\n  useEffect(() => {\n    console.log('Effect has been run');\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    console.log('data.hits.length: ');\n    console.log('data: ', data);\n    console.log('hits', data.hits);\n    setRecipes(data.hits);\n    setResults(data);\n    if (data.hits.length === 0) {\n      console.log('hello world');\n    }\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    // console.log(search);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"content\"> \n          <h1 className=\"app-title\">Recipe Finder</h1>\n          <form onSubmit={getSearch} className=\"search-form\">\n            <input className=\"search-bar\" type=\"input\" value={search} onChange={updateSearch} placeholder=\"What are you craving?\"/>\n            <button className=\"search-button\" type=\"submit\">Search</button>\n          </form>\n        </div>\n      </header>\n      { (results.q === \"\") ? alert('Please enter text into the search bar') : \n      // <main>\n      //   <p className=\"results-message\">Search results for \"{query}\":</p>\n      //   <div className=\"recipes\">\n      //     {recipes.map((recipe) => (\n      //       <Recipe\n      //         key={recipe.recipe.url}\n      //         title={recipe.recipe.label}\n      //         calories={recipe.recipe.calories}\n      //         image={recipe.recipe.image}\n      //         ingredients={recipe.recipe.ingredients}\n      //         url={recipe.recipe.url} />\n      //     ))}\n      //   </div>\n      // </main>\n      <main>\n        <p className=\"results-message\">Search results for \"{query}\":</p>\n        <div className=\"recipes\">\n          {recipes.map((recipe) => (\n            <Recipe\n              key={recipe.recipe.url}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n              url={recipe.recipe.url} />\n          ))}\n        </div>\n      </main>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}